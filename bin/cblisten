#!/usr/bin/env python3
"""
Clipboard monitor that tracks unique clipboard entries.
Press Ctrl+D to stop monitoring and print all unique entries.
"""

import argparse
import subprocess
import sys
import time
from threading import Event, Thread


def clear_clipboard():
    """Try to clear the clipboard using various methods."""
    clear_commands = ['wl-copy </dev/null', 'xsel --clipboard --input </dev/null', 'xclip -sel c -i </dev/null']

    for cmd in clear_commands:
        try:
            subprocess.run(cmd, shell=True, capture_output=True, timeout=1)
            # If any command succeeds, we're done
            return
        except Exception:
            # Try next command
            continue


def get_clipboard(cmd):
    """Get current clipboard content using the specified command."""
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=1)
        if result.returncode == 0:
            return result.stdout
        return None
    except Exception:
        return None


def monitor_clipboard(stop_event, entries, seen, cmd):
    """Monitor clipboard for changes every 100ms."""
    last_content = ""

    while not stop_event.is_set():
        current_content = get_clipboard(cmd)

        if current_content is not None:
            # Check if content changed and is new
            if current_content != last_content and current_content not in seen:
                entries.append(current_content)
                seen.add(current_content)
                last_content = current_content

        time.sleep(0.1)  # 100ms


def main():
    parser = argparse.ArgumentParser(description='Monitor clipboard and track unique entries until Ctrl+D is pressed.')
    parser.add_argument(
        '--cmd', default='xclip -sel c -o', help='Command to get clipboard content (default: xclip -sel c -o)'
    )

    args = parser.parse_args()

    clear_clipboard()

    entries = []
    seen = set()
    stop_event = Event()
    interrupted = False
    monitor_thread = Thread(target=monitor_clipboard, args=(stop_event, entries, seen, args.cmd), daemon=True)
    monitor_thread.start()

    print("Monitoring clipboard... Press Ctrl+D to stop and print entries", file=sys.stderr)

    try:
        # Wait for Ctrl+D (EOF)
        sys.stdin.read()
    except KeyboardInterrupt:
        # Ctrl+C pressed
        interrupted = True

    # Stop monitoring
    stop_event.set()
    monitor_thread.join(timeout=0.5)

    for entry in entries:
        print(entry, end='')
    if interrupted:
        sys.exit(141)


if __name__ == "__main__":
    main()
