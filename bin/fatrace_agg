#!/usr/bin/python3

from collections import defaultdict
import re
import argparse
import sys

def print_sorted_counts(counts, min_count, max_count):
    sorted_counts = sorted(counts.items(), key=lambda item: item[1])

    for key, count in sorted_counts:
        if min_count <= count <= max_count:
            print(f"{count} {key}")

def main():
    parser = argparse.ArgumentParser(description='Process fatrace output and count occurrences.')
    parser.add_argument('--min-counts', '--min', type=int, default=1, help='Minimum count to display')
    parser.add_argument('--max-counts', '--max', type=int, default=float('inf'), help='Maximum count to display')
    args = parser.parse_args()

    pattern = re.compile(r'(\w+)\((\d+)\): (.+)')

    program_counts = defaultdict(int)
    path_counts = defaultdict(int)
    try:
        for line in sys.stdin:
            if line.startswith('fatrace:'):
                continue

            match = pattern.match(line)
            if match:
                program_name, _, path = match.groups()
                program_counts[program_name] += 1
                path_counts[path] += 1
    except KeyboardInterrupt:
        print()

    print("Path Counts:")
    print_sorted_counts(path_counts, args.min_counts, args.max_counts)
    print()
    print("Program Counts:")
    print_sorted_counts(program_counts, args.min_counts, args.max_counts)

if __name__ == "__main__":
    main()
